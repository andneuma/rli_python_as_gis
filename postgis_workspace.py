from PostGISHelpers import *from WebOSM import *# Define assessment regionregion1 = Region("Wustermark",                 boundary='/Users/blubber/Documents/TEMP/wustermark_extend.shp')region2 = Region("Wustermark", boundary=(    12.871817013021891,    52.50091209200498,    13.018814242671711,    52.578008093778124))region3 = Region()# Initiate Query objectq = Query(name='buildings Wustermark', region=region1)# Define source DBdatabase = {'db': "osm",            'host': 'localhost',            'port': 5432,            'user': 'postgres_andi'}# database = {'db': "reiners_db",#             'host': '192.168.10.25',#             'port': 5432,#             'user': 'Andi'}# Define query featuresquery_features = {'schema': 'public',                  'relation': 'brandenburg_polygon',                  'geom_type': 'Polygon',                  'geom_col': 'way',                  'id_col': 'osm_id',                  'select_cols': ['osm_id', 'amenity'],                  'where_cond': "building is not NULL",                  'SRID': 4326}q.create_where_query(features=query_features)q.fetch_geoms(source_db=database)q.print_results()q.export2shp('/Users/blubber/Documents/TEMP/blubb.shp')fetch_admin_from_latlon(51, 12)# --- SQLAlchemy# import sqlalchemy# import keyring# from sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey, \#     select## engine = sqlalchemy.create_engine(#     'postgresql+psycopg2://postgres_andi:{pwd}@localhost/osm'.format(#         pwd=keyring.get_password('osm', 'andi_postgres')))# connection = engine.connect()# metadata = MetaData()# blubb = Table('brandenburg_polygon', metadata,#               Column('osm_id', Integer, primary_key=True),#               Column('amenity', String), schema='public')# s = select([blubb])# result = connection.execute(s)# results = result.fetchall()# print(results[0])# --- GeoAlchemy# import keyring# import geoalchemy2# from sqlalchemy import create_engine# from sqlalchemy.ext.declarative import declarative_base# from sqlalchemy import Column, Integer, String# from geoalchemy2 import Geometry# from sqlalchemy.orm import sessionmaker# from sqlalchemy import select## engine = create_engine(#     'postgresql+psycopg2://postgres_andi:{pwd}@localhost/osm'.format(#         pwd=keyring.get_password('osm', 'andi_postgres')))## Base = declarative_base()## class Building(Base):#     __tablename__ = 'brandenburg_polygon'#     osm_id = Column(Integer, primary_key=True)#     name = Column(String)#     amenity = Column(String)#     way = Column(Geometry('POLYGON'))## Session = sessionmaker(bind=engine)## session = Session()## query = session.query(Building)## for building in query:#     if building.name:#         print(building.name)## s = select([Building])# str(s)# conn = engine.connect()# result = conn.execute(s)## for row in result:#     if row['name']:#         print(row['name'])