from PostGISHelpers import *from WebOSMHelpers import *from region import *################################################################################ --- Fetch all polygons tagged as 'building' in Wustermark/Brandenburg## (Germany) using a pre-defined bounding box as clipping pattern# Define RegionWustermark = Region("Wustermark", boundary=(    12.871817013021891,    52.50091209200498,    13.018814242671711,    52.578008093778124))# Define dictionary containing query featuresquery_features = {'relation': 'germany_polygon',                  'select_cols': ['osm_id', 'amenity', 'name'],                  'where_cond': "building is not NULL",                  'SRID': 4326}# Create instance of OSMPolygonswustermark_buildings = OSMPolygons(name="Wustermark buildings",                                   region=Wustermark)# Set debug level of process to show only WARNINGS or higher levels of# information severitywustermark_buildings.set_debug_level('info')# Generate a select/from/where-query out of query_featureswustermark_buildings.create_where_query(**query_features)# Fetch geometrieswustermark_buildings.fetch_geoms(source_db='Andi@192.168.10.25:5432/reiners_db')# wustermark_buildings.fetch_geoms(source_db='postgres_andi@localhost:5432/osm')# Plot results on a mapwustermark_buildings.plot_view()# Print output as tablewustermark_buildings.print_results()# Save results to hard disk as ESRI shape filewustermark_buildings.export2shp(    './wustermark_buildings.shp')################################################################################ --- Perform the same operation using a boundary polygon as clipping pattern## stored as ESRI shapefrom PostGISHelpers import *from WebOSMHelpers import *from region import *# Define RegionWittenberg = Region("Wittenberg",                    boundary='./Example_data/Wittenberg.shp')# Create instance of OSMPolygonswittenberg_buildings = OSMPolygons(name="Wustermark buildings",                                   region=Wittenberg)# Define dictionary containing query featuresquery_features = {'relation': 'germany_polygon',                  'select_cols': ['osm_id', 'amenity', 'name'],                  'where_cond': "building is not NULL",                  'SRID': 4326}# Set debug level of process to show only WARNINGS or higher levels of# information severitywittenberg_buildings.set_debug_level('info')# Generate a select/from/where-query out of query_featureswittenberg_buildings.create_where_query(**query_features)wittenberg_buildings._sql_query# Fetch geometrieswittenberg_buildings.fetch_geoms(source_db='Andi@192.168.10.25:5432/reiners_db')# Plot results on a mapwittenberg_buildings.plot_view()# Print output as tablewittenberg_buildings.print_results()# Save results to hard disk as ESRI shape filewittenberg_buildings.export2shp(    './wustermark_buildings.shp')################################################################################ Fetch all polygons tagged as 'buildings' from full DB extent## CAUTION: slow depending on the size of the DB!from PostGISHelpers import *from WebOSMHelpers import *from region import *# Query without pre-defined regiongermany_buildings = OSMPolygons(name="Germany buildings")query_features = {'relation': 'germany_polygon',                  'select_cols': ['osm_id', 'amenity', 'name'],                  'where_cond': "building is not NULL",                  'SRID': 4326}brandenburg_buildings.create_where_query(**query_features)brandenburg_buildings.fetch_geoms(    source_db='Andi@192.168.10.25:5432/reiners_db')brandenburg_buildings.plot_view()brandenburg_buildings.print_results()brandenburg_buildings.export2shp(    './Output/brandenburg_buildings.shp')################################################################################ Fetch single geom type from DB using another table within (same!) database as## clipping patternfrom PostGISHelpers import *from WebOSMHelpers import *from region import *Testregion = Region(name="Testregion", boundary='deutschland.testwitte')query_features = {'relation': 'germany_polygon',                  'select_cols': ['osm_id', 'amenity', 'name'],                  'where_cond': "building is not NULL",                  'SRID': 4326}Testregion_amenities = OSMPolygons(name="Testregion shops",                                   region=Testregion)Testregion_amenities.create_where_query(**query_features)Testregion_amenities.fetch_geoms(source_db='Andi@192.168.10.25:5432/reiners_db')Testregion_amenities.print_results()Testregion_amenities.export2shp(    './Output/Testregion_amenities.shp')# Calculate Area of all buildingssum = 0for building in Testregion_amenities.results:    sum += loads(building['geom']).areaprint(sum)################################################################################ Fetch all power data from complete OSM data set (Polygon, Line, Point)## at oncefrom PostGISHelpers import *from WebOSMHelpers import *from region import *# from simple_log import *# Testregion = Region(name="Testregion", boundary='deutschland.testregion')Testregion = Region(name="Testregion", boundary='./Example_data/Wittenberg.shp')# Fetch Lines and and Polygons from OSM data setnetwork = OSMCollection(name="Testregion Stromnetz", region=Testregion,                        points=False,                        lines=False)# Create sql query used to fetch Line and Polygon geometriesnetwork.create_collection_query(relation_prefix='germany',                                select_cols=['osm_id', 'name', 'power'],                                where_cond="voltage is not NULL AND power is not NULL")# Fetch data# network.fetch_OSM_collection(source_db='Andi@192.168.10.25:5432/reiners_db')network.fetch_OSM_collection(source_db='postgres_andi@localhost:5432/osm')network.plot_view(el_limit=5000)network.Lines.plot_view(el_limit=15000)network.Polygons.plot_view(el_limit=5000)set_debug_level(value=debug_level)